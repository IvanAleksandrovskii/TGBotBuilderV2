# api/test_completions.py

from typing import Optional  # List

from fastapi import APIRouter, Query, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, desc, func  # , or_

from core.models import db_helper
from core.models.test_pack_completion import TestPackCompletion, CompletionStatus

router = APIRouter()


@router.get(
    "/test-completions/",
    summary="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–ø–∞–∫–æ–≤",
)
async def get_user_test_completions(
    user_id: int,
    status: Optional[str] = Query(
        None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (IN_PROGRESS, COMPLETED, ABANDONED)"
    ),
    test_pack: Optional[str] = Query(
        None, description="UUID (–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ) —Ç–µ—Å—Ç-–ø–∞–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π"
    ),
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)"),
    page_size: int = Query(
        20, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"
    ),
    session: AsyncSession = Depends(db_helper.session_getter),
):
    # üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Enum (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    status_enum = None
    if status:
        try:
            status_enum = CompletionStatus[status.upper()]
        except KeyError:
            valid_values = ", ".join([s.name for s in CompletionStatus])
            raise HTTPException(
                status_code=400,
                detail=f"Invalid status value. Must be one of: {valid_values}",
            )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = select(TestPackCompletion).where(
        TestPackCompletion.test_pack_creator_id == user_id
    )
    if status_enum:
        query = query.where(TestPackCompletion.status == status_enum)
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ—Å—Ç-–ø–∞–∫—É (–∑–¥–µ—Å—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ test_pack_id, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
    if test_pack:
        query = query.where(TestPackCompletion.test_pack_id == test_pack)
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
        # query = query.where(
        #     or_(
        #         TestPackCompletion.test_pack_id == test_pack,
        #         TestPackCompletion.test_pack_name.ilike(f"%{test_pack}%")
        #     )
        # )

    query = query.order_by(desc(TestPackCompletion.updated_at))

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    total_query = select(func.count()).select_from(query.subquery())
    total_count_result = await session.execute(total_query)
    total_count = total_count_result.scalar()

    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–ø–∞–∫–æ–≤
    if total_count == 0:
        return {
            "total_count": 0,
            "total_pages": 0,
            "current_page": 1,
            "page_size": page_size,
            "data": [],
            "test_pack_list": [],
            "test_pack_list": [],
        }

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–ø–∞–∫–æ–≤ (UUID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ) —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    test_pack_query = select(
        TestPackCompletion.test_pack_id, TestPackCompletion.test_pack_name
    ).where(TestPackCompletion.test_pack_creator_id == user_id)
    if status_enum:
        test_pack_query = test_pack_query.where(
            TestPackCompletion.status == status_enum
        )
    # –í –¥–∞–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ test_pack –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–ø–∞–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_pack_query = test_pack_query.distinct()
    distinct_result = await session.execute(test_pack_query)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å uuid –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    test_pack_list = [
        {"test_pack_id": str(row[0]), "test_pack_name": row[1]}
        for row in distinct_result.all()
    ]

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è ‚Äì –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏ —Å–º–µ—â–∞–µ–º –≤—ã–±–æ—Ä–∫—É
    query = query.limit(page_size).offset((page - 1) * page_size)
    results = await session.execute(query)
    test_completions = results.scalars().all()

    return {
        "total_count": total_count,
        "total_pages": (total_count + page_size - 1) // page_size,
        "current_page": page,
        "page_size": page_size,
        "data": [
            {
                "id": str(tc.id),
                "test_pack_id": str(tc.test_pack_id),
                "test_pack_name": tc.test_pack_name,
                "status": tc.status.value.upper(),
                "created_at": tc.created_at,  # TODO: new
                "updated_at": tc.updated_at,
                "pending_tests": tc.pending_tests,
                "completed_tests": tc.completed_tests,
                "completion_percentage": tc.completion_percentage,  # TODO: new
                "user_data": tc.user_data,
                "ai_transcription": tc.ai_transcription,  # TODO: new, nullable
            }
            for tc in test_completions
        ],
        "test_pack_list": test_pack_list,
    }
