# handlers/test_packs/solve_the_pack/inside_the_custom_test.py

from datetime import datetime

from sqlalchemy import select
from sqlalchemy.orm import selectinload

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core import log
from core.models import (
    db_helper,
    CustomTest,
    CustomQuestion,
)
from handlers.test_packs.solve_the_pack.solve_pack_menu import get_solve_test_menu


router = Router()


class PassCustomTestStates(StatesGroup):
    PASSING = State()
    QUESTION = State()


@router.callback_query(PassCustomTestStates.PASSING)
async def inside_the_custom_test(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await callback_query.answer()

    data = await state.get_data()
    test_id = data.get("test_id")  # UUID custom-—Ç–µ—Å—Ç–∞
    test_pack_completion_id = data.get("test_pack_completion_id")

    await state.set_state(PassCustomTestStates.PASSING)
    await state.update_data(
        test_pack_completion_id=test_pack_completion_id,
        test_id=test_id,
        test_type="custom",
    )

    # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º test + –≤–æ–ø—Ä–æ—Å—ã
    async with db_helper.db_session() as session:
        custom_test_query = (
            select(CustomTest)
            .where(CustomTest.id == test_id)
            .options(selectinload(CustomTest.custom_questions))
        )
        result = await session.execute(custom_test_query)
        custom_test = result.scalar_one_or_none()

        if not custom_test:
            await callback_query.message.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            # –í–µ—Ä–Ω—ë–º—Å—è –≤ –º–µ–Ω—é
            await get_solve_test_menu(callback_query.message, state)
            return

        # 2) –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ –ë–î –∏–ª–∏ –∫–∞–∫-—Ç–æ –µ—â—ë)
        questions = custom_test.custom_questions
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –¥–µ–ª–∞–µ–º:
        # questions = sorted(questions, key=lambda q: q.id) # –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ—Ä—è–¥–æ–∫

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ state
    # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å user_answers –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    await state.update_data(
        custom_test_name=custom_test.name,
        allow_back=custom_test.allow_back,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
        questions=[q.id for q in questions],
        current_index=0,
        user_answers=[],  # –∑–¥–µ—Å—å –±—É–¥–µ–º –∫–æ–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
    )

    # 4) –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é "QUESTION" –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∑–∞–¥–∞—é—â—É—é 1-–π –≤–æ–ø—Ä–æ—Å
    await state.set_state(PassCustomTestStates.QUESTION)
    await ask_next_question(callback_query.message, state)


async def ask_next_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions_ids = data["questions"]
    current_index = data["current_index"]

    if current_index >= len(questions_ids):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã -> —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await finalize_custom_test(message, state)
        return

    question_id = questions_ids[current_index]

    async with db_helper.db_session() as session:
        q = await session.execute(
            select(CustomQuestion).where(CustomQuestion.id == question_id)
        )
        question = q.scalar_one()

    text = question.question_text

    if question.is_quiz_type:
        # –°–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
        kb_buttons = []
        for i in range(1, 7):
            ans_text = getattr(question, f"answer{i}_text", None)
            ans_score = getattr(question, f"answer{i}_score", None)
            if ans_text is not None:
                kb_buttons.append(
                    [
                        types.InlineKeyboardButton(
                            text=ans_text,
                            callback_data=f"custom_answer_{i}",
                        )
                    ]
                )
        # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ –∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if data.get("allow_back", False) and current_index > 0:
            kb_buttons.append(
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="custom_back")]
            )

        markup = types.InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        await message.answer(f"–í–æ–ø—Ä–æ—Å (multiple choice): {text}", reply_markup=markup)

    else:
        # –°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç: –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if data.get("allow_back", False) and current_index > 0:
            text += "\n\n(–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /back)"
        await message.answer(
            f"–í–æ–ø—Ä–æ—Å (—Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç): {text}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:"
        )


@router.callback_query(
    PassCustomTestStates.QUESTION, F.data.startswith("custom_answer_")
)
async def handle_choice_answer(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç", show_alert=False)

    # Get answer choice
    parts = callback_query.data.split("_")
    answer_index = int(parts[-1])  # 1..6

    # Get state data with safety checks
    data = await state.get_data()
    questions_ids = data.get("questions", [])
    current_index = data.get("current_index", 0)

    # Bounds checking
    if not questions_ids:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await finalize_custom_test(callback_query.message, state)
        return

    if current_index >= len(questions_ids):
        # We've somehow gone past the end of questions
        await callback_query.message.answer("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω—ã.")
        await finalize_custom_test(callback_query.message, state)
        return

    # Get current question_id with safety check
    question_id = questions_ids[current_index]

    # Load question from DB with error handling
    from core.models.custom_test import CustomQuestion

    async with db_helper.db_session() as session:
        q_db = await session.execute(
            select(CustomQuestion).where(CustomQuestion.id == question_id)
        )
        question = q_db.scalar_one_or_none()

    if not question:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        # Skip this question and move to next
        await state.update_data(current_index=current_index + 1)
        await ask_next_question(callback_query.message, state)
        return

    # Get answer data with validation
    ans_text = getattr(question, f"answer{answer_index}_text", "")
    ans_score = getattr(question, f"answer{answer_index}_score", 0)
    question_text = question.question_text

    if not ans_text:  # Additional validation
        await callback_query.message.answer(
            "–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        )
        return

    # Get user_answers with safety check
    user_answers = data.get("user_answers", [])

    # Save the answer
    user_answers.append(
        {
            "question_text": question_text,
            "answer_text": ans_text,
            "score": ans_score,
            "timestamp": datetime.utcnow().isoformat(),
        }
    )

    # Update state and move to next question
    await state.update_data(current_index=current_index + 1, user_answers=user_answers)

    # Move to next question
    await ask_next_question(callback_query.message, state)


@router.message(PassCustomTestStates.QUESTION, F.text)
async def handle_free_text_answer(message: types.Message, state: FSMContext):
    """
    Handles user's free-text answer for non-quiz type questions.
    Includes bounds checking and error handling.
    """
    data = await state.get_data()
    questions_ids = data.get("questions", [])
    current_index = data.get("current_index", 0)

    # Bounds checking
    if not questions_ids:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ.")
        await finalize_custom_test(message, state)
        return

    if current_index >= len(questions_ids):
        # We've somehow gone past the end of questions
        # await message.answer("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω—ã.")
        await finalize_custom_test(message, state)
        return

    # Get current question_id with safety check
    question_id = questions_ids[current_index]

    # Load question from DB with error handling
    from core.models.custom_test import CustomQuestion

    async with db_helper.db_session() as session:
        q_db = await session.execute(
            select(CustomQuestion).where(CustomQuestion.id == question_id)
        )
        question = q_db.scalar_one_or_none()

    if not question:
        await message.answer("–û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        # Skip this question and move to next
        await state.update_data(current_index=current_index + 1)
        await ask_next_question(message, state)
        return

    question_text = question.question_text

    # Handle the answer
    user_answers = data.get("user_answers", [])

    # Save the answer with additional validation
    answer_text = message.text.strip()
    if not answer_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç–µ. –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    user_answers.append(
        {
            "question_text": question_text,
            "answer_text": answer_text,
            "score": None,
            "timestamp": datetime.utcnow().isoformat(),
        }
    )

    # Update state and move to next question
    await state.update_data(current_index=current_index + 1, user_answers=user_answers)

    await ask_next_question(message, state)


@router.message(PassCustomTestStates.QUESTION)
async def handle_free_text_answer_incorrect(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç.")


async def finalize_custom_test(message: types.Message, state: FSMContext):  # TODO: Write a method checking if no more tests to solve stays and add here + write scenarios
    data = await state.get_data()
    test_pack_completion_id = data.get("test_pack_completion_id")
    test_id = data.get("test_id")
    test_name = data.get("custom_test_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç")

    if not all([test_pack_completion_id, test_id]):
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return

    user_answers = data.get("user_answers", [])

    # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π score
    total_score = sum(
        ans.get("score", 0) for ans in user_answers if ans.get("score") is not None
    )

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_entry = {
        # "total_score": total_score,  # TODO: Fix or delete
        "score": total_score,
        "free_answers": [ans for ans in user_answers if ans.get("score") is None],
        "test_answers": [ans for ans in user_answers if ans.get("score") is not None],
    }

    from core.models.test_pack_completion import TestPackCompletion

    async with db_helper.db_session() as session:
        try:
            tpc = await session.get(TestPackCompletion, test_pack_completion_id)
            if not tpc:
                log.error(
                    f"–û—à–∏–±–∫–∞: TestPackCompletion {test_pack_completion_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                )
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            log.info(
                f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TestPackCompletion {test_pack_completion_id}"
            )

            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç –∏–∑ `pending_tests`
            original_len = len(tpc.pending_tests)
            tpc.pending_tests = [t for t in tpc.pending_tests if t["id"] != str(test_id)]  # TODO: Double check (( ! ))
            log.info(
                f"–£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {original_len - len(tpc.pending_tests)} –∏–∑ pending_tests"
            )

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è completed_tests
            new_completed = {
                "type": "custom",
                "id": test_id,
                "name": test_name,
                "completed_at": datetime.utcnow().isoformat(),
                "result": result_entry,
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º `completed_tests` —á–µ—Ä–µ–∑ –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ (–≤–∞–∂–Ω–æ –¥–ª—è SQLAlchemy!)
            if not any(t["id"] == str(test_id) for t in tpc.completed_tests):
                updated_completed_tests = tpc.completed_tests.copy()
                updated_completed_tests.append(new_completed)
                tpc.completed_tests = updated_completed_tests  # –Ø–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º JSON
                log.info(f"–¢–µ—Å—Ç {test_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ completed_tests")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ SQLAlchemy
            session.add(tpc)
            await session.commit()
            log.info(
                f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è TestPackCompletion {test_pack_completion_id}"
            )

        except Exception as e:
            log.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ TestPackCompletion {test_pack_completion_id}: {str(e)}"
            )
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    await message.answer(
        f"–¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {total_score}"
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
    from handlers.test_packs.solve_the_pack.start_the_pack import SolveThePackStates

    await state.set_state(SolveThePackStates.SOLVING)
    await state.update_data(test_pack_completion_id=test_pack_completion_id)
    await get_solve_test_menu(message, state)


@router.callback_query(PassCustomTestStates.QUESTION, F.data == "custom_back")
async def handle_back(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("current_index", 0)
    if current_index == 0:
        await callback_query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_answers = data.get("user_answers", [])
    if user_answers:
        user_answers.pop()
    new_index = current_index - 1
    await state.update_data(current_index=new_index, user_answers=user_answers)
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É")
    await ask_next_question(callback_query.message, state)
